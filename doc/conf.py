#!/usr/bin/env python
"""
Generate HTML docs
"""

import runpy
import sys
import os

# Don't change to
# from arcade.version import VERSION
# or read the docs build will fail.
# --- Pre-processing Tasks
from .version import VERSION

# Then generate thumbnails if they do not exist

# Make thumbnails for the example code screenshots
runpy.run_path('../util/generate_example_thumbnails.py', run_name='__main__')
# Create a listing of the resources
runpy.run_path('../util/create_resources_listing.py', run_name='__main__')
# Run the generate quick API index script
runpy.run_path('../util/update_quick_index.py', run_name='__main__')

# autodoc_default_options = {
#     'special-members': '__init__',
# }

autodoc_inherit_docstrings = False

sys.path.insert(0, os.path.abspath('..'))
sys.path.insert(0, os.path.abspath('../arcade'))

RELEASE = VERSION

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx.ext.ifconfig',
    'sphinx.ext.viewcode',
    'sphinx_copybutton',
    'sphinx_sitemap',
]

# --- Spell check. Never worked well.
# try:
#     import sphinxcontrib.spelling
# except ImportError:
#     pass
# else:
#     extensions.append("sphinxcontrib.spelling")
#
# spelling_word_list_filename = "wordlist.txt"

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The encoding of source files.
# source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'Python Arcade Library'
copyright = '2021, Paul Vincent Craven'
author = 'Paul Vincent Craven'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = VERSION
# The full version, including alpha/beta/rc tags.
release = RELEASE

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'sphinx_rtd_theme'

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = '_static/favicon-32x32.png'

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = '_static/favicon.ico'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
html_extra_path = ['html_extra']

# Output file base name for HTML help builder.
htmlhelp_basename = 'Arcadedoc'
html_baseurl = 'https://arcade.academy/'
html_codeblock_linenos_style = 'table'

# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'arcade', 'Arcade Documentation',
     [author], 1)
]

# If true, show URL addresses after external links.
# man_show_urls = False


# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'python': ('https://docs.python.org/3', None),
                       'numpy': ('https://pyglet.readthedocs.io/en/latest/', None),
                       'pyglet': ('https://numpy.org/doc/stable', None),
                       'PIL': ('https://pillow.readthedocs.io/en/stable', None)}


def replace_in_file(filename, replace_list):
    try:
        import os
        file_path = os.path.dirname(os.path.abspath(__file__))
        os.chdir(file_path)

        temp_filename = filename + ".tmp"
        my_api_file = open(filename, encoding="utf8")
        my_updated_api_file = open(temp_filename, 'w', encoding="utf8")

        line_count = 0
        fix_count = 0
        for line in my_api_file:
            line_count += 1
            for replacement in replace_list:
                original_text = replacement[0]
                new_text = replacement[1]
                new_line = line.replace(original_text, new_text)
                if len(new_line) != len(line):
                    line = new_line
                    fix_count += 1
            my_updated_api_file.write(line)

        my_api_file.close()
        my_updated_api_file.close()

        import os
        os.remove(filename)
        os.rename(temp_filename, filename)
        print(f"Done fixing {fix_count} lines out of {line_count} lines in {filename} with {replace_list}")

    except Exception as e:
        import logging
        logging.exception("Something bad happened.")
        print("Error")


def source_read(app, docname, source):

    # print(f"  XXX Reading {docname}")
    import os
    file_path = os.path.dirname(os.path.abspath(__file__))
    os.chdir(file_path)

    filename = None
    if docname == "arcade.color":
        filename = "../arcade/color/__init__.py"
    elif docname == "arcade.csscolor":
        filename = "../arcade/csscolor/__init__.py"

    if filename:
        import re
        p = re.compile("^([A-Z_]+) = (\\(.*\\))")

        original_text = source[0]
        append_text = "\n\n.. raw:: html\n\n"
        append_text += "    <table>"
        color_file = open(filename)

        for line in color_file:
            match = p.match(line)
            if match:
                append_text += "    <tr><td>"
                append_text += match.group(1)
                append_text += "</td><td>"
                append_text += match.group(2)
                append_text += f"<td style='width:80px;background-color:rgb{match.group(2)};'>&nbsp;</td>"
                append_text += "    </td></tr>\n"
        append_text += "    </table>"
        source[0] = original_text + append_text


def post_process(app, exception):
    try:
        # The API docs include the submodules the commands are in. This is confusing
        # so let's remove them.
        replace_list = [
            [".window_commands.", "."],
            [".draw_commands.", "."],
            [".buffered_draw_commands.", "."],
            [".text.", "."],
            [".application.", "."],
            [".geometry.", "."],
            [".sprite_list.", "."],
            [".sprite.", "."],
            [".physics_engines.", "."],
            [".sound.", "."]
        ]
        filename = 'build/html/arcade.html'
        replace_in_file(filename, replace_list)

        from dirsync import sync
        source_path = '../arcade/resources'
        target_path = 'build/html/resources'

        sync(source_path, target_path, 'sync', create=True)  # for syncing one way

        # filename = 'build/html/quick_index.html'
        # replace_in_file(filename, replace_list)

        # # Figures have an align-center style I can't easily get rid of.
        # filename = 'build/html/examples/index.html'
        # replace_list = [
        #     ["figure align-center", "figure"]
        # ]
        # replace_in_file(filename, replace_list)
    except:
        import traceback
        traceback.print_exc()
        raise


def setup(app):
    app.add_css_file("css/custom.css")
    app.connect('source-read', source_read)
    app.connect('build-finished', post_process)
